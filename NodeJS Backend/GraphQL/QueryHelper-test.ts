import {OrderDirection, QueryHelper} from "./QueryHelper";
import moment = require("moment-timezone");
import {Pool} from "./Schema_Interfaces/Pool";
import {TokenHourData} from "./Schema_Interfaces/TokenHourData";
import {TokenDayData} from "./Schema_Interfaces/TokenDayData";
import {print_json_tree} from "../Utils/print_json_tree";

async function test()
{
    //let qh: QueryHelper = new QueryHelper();

    //const result = await qh.getPools(5000, "volumeUSD", OrderDirection.desc );
    //console.log(`There are ${result.length} pools.`);

    //for(let pool of result) {
    //    console.log(`
    //    Pool ID: ${pool['id']}
    //    1 ${pool['token0']['symbol']} is worth ${pool['token1Price']} ${pool['token1']['symbol']}
    //    1 ${pool['token1']['symbol']} is worth ${pool['token0Price']} ${pool['token0']['symbol']}`);
    //}
    //
    //let pool_match_list: object[] = await qh.getPoolIdByCoinMatch(['WETH','DAI'],1000);
    //for(let match of pool_match_list) {
    //    let match_id = match['id'];
    //    console.log(`Matched pool id is ${match_id}`);
    //}
    //await checkForDuplicatesById(pool_match_list);
    //let before = moment('2022-01-13T12:00:00Z')
    //let  = moment(new Date());
    //console.log(now.tz('America/New_York').format('MM/DD/YYYY h:ma z'));
    //testGetPoolsByID(result);
    //testGetTokenHourDatas(5);
    testGetTokenDayDatas(100);
    // trying to get price of weth usd, it depends if weth is defined as token0 or token1 in the match.
    let qh = new QueryHelper();
    const pools:Pool[] =
        await qh.getPoolByTokenMatch(['WETH', 'USDT'],20);
    let wethPool:Pool = pools[0];
    console.log("Price of WETH is " + Pool.getETHPriceUSD(wethPool));
}

// return string is print data generated by the test.
async function testGetTokenHourDatas(how_many_print:number):Promise<string>
{
   const qh = new QueryHelper();
   const tokenHourDatas: TokenHourData[] =
       await qh.getTokenHourData(5, 'volumeUSD', OrderDirection.desc);
   // prepare some selections for pretty printing:
   let list_print_str: String = ``;
   for(let i:number = 0; i < how_many_print; i++ ){
         list_print_str +=
         `Token: ${tokenHourDatas[i].token?.symbol}
            id: ${tokenHourDatas[i].token?.id }
            priceUSD: ${tokenHourDatas[i].priceUSD}
            volumeUSD: ${tokenHourDatas[i].volumeUSD}
            number of pools: ${tokenHourDatas[i].token?.poolCount }
         `
   }
       
   const message:string =
    ` tokenHourDatas:
    `+ `total items: ${tokenHourDatas.length}
    `+ `${list_print_str.toString()} 
    `;
    console.log(message);
    console.log(print_json_tree(tokenHourDatas[0]," "));
    console.log(tokenHourDatas);
    return message;
}

// return string is print data generated by the test.
async function testGetTokenDayDatas(how_many_print:number):Promise<string>
{
    const qh = new QueryHelper();
    const tokenDayDatas: TokenDayData[] =
        await qh.getTokenDayData(100, 'volumeUSD', OrderDirection.desc);
    // prepare some selections for pretty printing:
    let list_print_str: String = ``;
    for(let i:number = 0; i < how_many_print; i++ ){
        list_print_str +=
            `Token: ${tokenDayDatas[i].token?.symbol}
            id: ${tokenDayDatas[i].token?.id }
            priceUSD: ${tokenDayDatas[i].priceUSD}
            volumeUSD: ${tokenDayDatas[i].volumeUSD}
            number of pools: ${tokenDayDatas[i].token?.poolCount }
         `
    }

    const message:string =
        ` tokenDayDatas:
    `+ `total items: ${tokenDayDatas.length}
    `+ `${list_print_str.toString()} 
    `;
    console.log(message);
    console.log(print_json_tree(tokenDayDatas[0]," "))
    return message;
}


async function testGetPoolsByID(pools:Pool[]): Promise<Pool[]>
{
    const qh = new QueryHelper();
    let id_list = qh.getIDsFromPoolList(pools);
    let fetched_pools:Pool[] = await qh.getPoolsByID(id_list);
    //console.log("id_list: " + "\n" +
    //    id_list + "\n" +
    //    "fetched_pools:" + '\n' );
    //console.log(fetched_pools);
    console.log("Pools length is: " + fetched_pools.length);
    return fetched_pools;
}
// Test if queries ever return duplicates:
async function checkForDuplicatesById(list:object[]): Promise<void>
{
    let duplicates_found:Boolean = false;
    let list_copy:object[] = [...list];

    list_copy = list_copy.sort(new QueryHelper().sort_pools_by_id_func);
    //length must be 2 or greater because we are popping and comparing
    while(list_copy.length > 1)
    {
        const item: object | undefined = list_copy.pop();
        // item shouldn't be null, compiler keeps complaining though
        // @ts-ignore
        if(item['id'] === list_copy[list_copy.length -1]['id']){
            duplicates_found = true;
            throw new Error("Found duplicates ids in list. Something may or may not be wrong with that.");
        }
    }
    if(!duplicates_found) console.log('No duplicate pool ids found.');

}

test();