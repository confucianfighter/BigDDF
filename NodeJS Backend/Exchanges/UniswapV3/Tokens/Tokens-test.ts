// return string is print data generated by the test.
import {OrderDirection} from "../../../GraphQL/QueryHelper";
import {IToken} from "./IToken";
import {getTokens} from "./Tokens";
import {Pool} from "../Pools/Pool";
import {Timer} from "../../../Utils/Timer";

let tokens_recieved:boolean = false;
export async function test(verbose:boolean = false)
{
    console.log(`Starting Tokens test:`)
    let message = null;
    while(tokens_recieved === false) {

        if(message === null) message = getWrappedPromise();
        console.log(message);
    }
    if(verbose) console.log(message);
    console.log(`   ...Finished Tokens test.`);
}
test();

async function getWrappedPromise():Promise<string>{
    return new Promise<string>(async (resolve,reject) => {
            resolve(
                await ( async () => {
                    let result = await testGetTokens(5000, undefined, 'volumeUSD', OrderDirection.desc);
                    tokens_recieved = true;
                    return result;
                })()
            )
    });
}

async function testGetTokens(first:number, token_symbol:string = "", orderBy:string = 'symbol', direction:OrderDirection = OrderDirection.desc):Promise<string>
{
    let get_tokens_timer = new Timer(); get_tokens_timer.start();
    const tokens:IToken[] =
        await getTokens(first, orderBy, direction);
    let output_str:string = "";
    if(token_symbol != "")
    {
        let found_it:boolean = false;
        for(let token of tokens) {
            if(token.symbol === token_symbol) {
                found_it = true;
                output_str += `
                    Found token ${token.symbol}!`;
            }
        }
        if(!found_it) output_str += `
            Searched ${first} tokens.
            Couldn't find token ${token_symbol}`
    }
    else {
        for (let i = 0; i < tokens.length; i++) {
            let token = tokens[i];
            output_str += `
        
            Token name: ${token.name}
            Token symbol: ${token.symbol}
            Token id: ${token.id}
            White list pools:`
            const pools: Pool[] = token.whitelistPools;
            for (let j = 0; j < pools.length; j++) {
                let pool: Pool = pools[j];
                output_str += `
                ${pool.id}`
            }
        }
    }
    let message = `   Asked Tokens.getTokens for ${first} tokens and got back ${tokens.length}.`;
    if(tokens.length !== first)  message = `Caution ${message}!`;
    else message = `${message} Looks good.`;
    console.log(message);
    get_tokens_timer.stop("getTokens");
    return output_str;
}